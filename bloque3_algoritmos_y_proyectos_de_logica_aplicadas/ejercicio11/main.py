"""
Ejercicio 11: Validador de C√©dula (Algoritmo Simple)

Este programa valida un n√∫mero de c√©dula seg√∫n una regla simple: la suma
de sus d√≠gitos debe ser un n√∫mero par. El programa solicita la c√©dula
al usuario en un bucle hasta que ingrese una v√°lida.
"""
from typing import List


def validar_cedula(cedula: str) -> bool:
    """
    Valida un n√∫mero de c√©dula comprobando si la suma de sus d√≠gitos es par.

    Args:
        cedula (str): El n√∫mero de c√©dula como una cadena de texto.

    Returns:
        bool: True si la suma de los d√≠gitos es par, False en caso contrario.
    """
    # 1. Validaci√≥n de la entrada: asegurarse de que solo contenga d√≠gitos.
    if not cedula.isdigit():
        print("‚ö†Ô∏è Error: La c√©dula debe contener solo n√∫meros.")
        return False

    # 2. Calcular la suma de los d√≠gitos
    suma_digitos = 0
    for digito in cedula:
        suma_digitos += int(digito)

    # 3. Comprobar si la suma es par
    if suma_digitos % 2 == 0:
        return True
    else:
        return False


def principal():
    """
    Funci√≥n principal que solicita y valida la c√©dula del usuario en un bucle.
    """
    print("üõÇ Validador de C√©dula üõÇ")
    print("La c√©dula es v√°lida si la suma de sus d√≠gitos es par.")

    while True:
        cedula_usuario = input("\nIngrese su n√∫mero de c√©dula (solo n√∫meros): ")

        # Validar si la entrada est√° vac√≠a
        if not cedula_usuario.strip():
            print("‚ö†Ô∏è Error: No se puede dejar el campo de la c√©dula vac√≠o.")
            continue

        # Llamar a la funci√≥n de validaci√≥n
        es_valida = validar_cedula(cedula_usuario)

        if es_valida:
            print(f"\n‚úÖ ¬°C√©dula v√°lida! La suma de sus d√≠gitos ({sum(int(d) for d in cedula_usuario)}) es par.")
            break
        else:
            # El mensaje de error espec√≠fico ya lo muestra la funci√≥n validar_cedula
            print("‚ùå La c√©dula no es v√°lida. Por favor, intente de nuevo.")


if __name__ == "__main__":
    principal()