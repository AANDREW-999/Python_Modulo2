"""
Ejercicio 11: Validador de C√©dula (Algoritmo Simple)

Este programa valida un n√∫mero de c√©dula seg√∫n una regla simple: la suma
de sus d√≠gitos debe ser un n√∫mero par. La l√≥gica de validaci√≥n est√°
encapsulada en una funci√≥n que lanza excepciones para manejar los errores.
"""
from typing import List


def validar_cedula(cedula: str) -> bool:
    """
    Valida la entrada de c√©dula y luego comprueba si la suma de sus d√≠gitos es par.

    Args:
        cedula (str): El n√∫mero de c√©dula como una cadena de texto.

    Returns:
        bool: True si la suma de los d√≠gitos es par.

    Raises:
        ValueError: Si la entrada est√° vac√≠a, no contiene solo n√∫meros o no tiene 10 d√≠gitos.
    """
    if not cedula.strip():
        raise ValueError("El campo de la c√©dula no puede estar vac√≠o.")

    if not cedula.isdigit():
        raise ValueError("La c√©dula debe contener solo n√∫meros.")

    if len(cedula) != 10:
        raise ValueError("La c√©dula debe tener exactamente 10 d√≠gitos.")

    suma_digitos = sum(int(digito) for digito in cedula)
    return suma_digitos % 2 == 0


def main():
    """
    Funci√≥n principal que solicita y gestiona la validaci√≥n de la c√©dula.
    """
    print("üõÇ Validador de C√©dula üõÇ")
    print("La c√©dula es v√°lida si la suma de sus d√≠gitos es par.")

    while True:
        try:
            cedula_usuario = input("\nIngrese su n√∫mero de c√©dula: ")

            es_valida = validar_cedula(cedula_usuario)

            if es_valida:
                print("‚úÖ ¬°C√©dula v√°lida!")
                break
            else:
                print("‚ùå C√©dula no v√°lida. La suma de sus d√≠gitos es impar. Intente de nuevo.")

        except ValueError as e:
            print(f"‚ö†Ô∏è Error: {e}")


if __name__ == "__main__":
    main()