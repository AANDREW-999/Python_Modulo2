"""
Ejercicio 6: Analizador de Posiciones de Letras con enumerate

Este programa encuentra y devuelve todos los √≠ndices de una letra
especifica dentro de una frase, utilizando la funci√≥n enumerate().
"""

def encontrar_indices(frase: str, letra: str) -> list[int]:
    """
    Encuentra todas las posiciones de una letra en una frase dada.

    Args:
        frase (str): La frase en la que se buscara la letra.
        letra (str): La letra a buscar. Debe ser un solo car√°cter.

    Returns:
        list[int]: Una lista con los √≠ndices (posiciones + 1) de la letra.
    """
    indices = []
    #Usames enumerate() para obtener tanto el √≠ndice (i) como el valor (c) en cada iteraci√≥n.
    for i, c in enumerate(frase.replace(" ", "")):
        if c.lower() == letra.lower():
            indices.append(i + 1)
    return indices

def main():
    """
    Funci√≥n main que solicita la frase y la letra al usuario,
    valida las entradas y muestra los resultados.
    """
    print("üîç Analizador de Posiciones de Letras üîç")

    # --- Validaci√≥n de la Frase ---
    # El bucle se repetir√° hasta que el usuario ingrese una frase no vac√≠a.
    while True:
        frase = input("\nPor favor, ingrese una frase: ").strip().replace(" ", "").lower()
        if frase.isalpha():  # Si la frase no est√° vac√≠a (es decir, no es "")
            break  # Salimos del bucle
        print("‚ö†Ô∏è Advertencia: La frase no puede estar vac√≠a o no puede contener numeros. Int√©ntelo de nuevo.")

    # --- Validaci√≥n de la Letra ---
    # El bucle se repetir√° hasta que se ingrese un √∫nico car√°cter alfab√©tico.
    while True:
        letra = input("Por favor, ingrese una letra para buscar en la frase: ").strip().replace(" ", "").lower()
        if len(letra) == 1 and letra.isalpha():
            break  # Salimos del bucle si es una sola letra
        print("‚ùå Error: Debe ingresar una sola letra v√°lida (de la a-z). Int√©ntelo de nuevo.")

    # Encuentra los √≠ndices de la letra en la frase
    indices_encontrados = encontrar_indices(frase, letra)

    # Muestra los resultados
    if indices_encontrados:
        # Convertimos la lista de n√∫meros a una lista de strings para unirlos con comas
        posiciones_str = ", ".join(map(str, indices_encontrados))
        print(f"\n‚úÖ ¬°Encontrada! La letra '{letra}' aparece en la(s) posici√≥n(es): {posiciones_str}.")
    else:
        print(f"\n‚ùå Lo siento, la letra '{letra}' no se encontr√≥ en la frase.")


if __name__ == "__main__":
    main()
