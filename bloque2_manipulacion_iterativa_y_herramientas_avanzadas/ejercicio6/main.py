"""
Ejercicio 6: Analizador de Posiciones de Letras con enumerate

Este programa encuentra y devuelve todos los √≠ndices de una letra
especifica dentro de una frase, utilizando la funci√≥n enumerate().
"""

def encontrar_indices(frase: str, letra: str) -> list[int]:
    """
    Encuentra todas las posiciones de una letra en una frase dada.

    Args:
        frase (str): La frase en la que se buscara la letra.
        letra (str): La letra a buscar. Debe ser un solo car√°cter.

    Returns:
        list[int]: Una lista con los √≠ndices (posiciones) de la letra encontrada.
    """
    indices = []
    #Usames enumerate() para obtener tanto el √≠ndice (i) como el valor (c) en cada iteraci√≥n.
    for i, c in enumerate(frase):
        if c.lower() == letra.lower():
            indices.append(i)
    return indices
def main():
    """
    Funci√≥n main que solicita la frase y la letra al usuario,
    valida las entradas y muestra los resultados.
    """
    print("üîç Analizador de Posiciones de Letras üîç")

    # Solicita la frase al usuario
    frase = input("Por favor, ingrese una frase: ").strip()
    if frase == "":
        print("‚ö†Ô∏è Advertencia: La frase no puede estar vac√≠a.")
        return

    # Solicita la letra al usuario y valida que sea un solo car√°cter
    letra = input("Por favor, ingrese una letra para buscar en la frase: ").strip()
    if len(letra) != 1 or not letra.isalpha():
        print("‚ùå Error: Debe ingresar una sola letra v√°lida (a-z o A-Z).")
        return

    # Encuentra los √≠ndices de la letra en la frase
    indices_encontrados = encontrar_indices(frase, letra)

    # Muestra los resultados
    if indices_encontrados:
        print(f"\nLa letra '{letra}' se encontr√≥ en las posiciones: {indices_encontrados}")
    else:
        print(f"\nLa letra '{letra}' no se encontr√≥ en la frase.")


if __name__ == "__main__":
    main()
