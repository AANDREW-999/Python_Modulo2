"""
Ejercicio 9: Transformaci√≥n de Datos con Dictionary Comprehensions

Versi√≥n refactorizada con bloques de validaci√≥n especializados, incluyendo
una funci√≥n robusta para validar el formato de los nombres de productos.
"""
from typing import List, Dict, Union

# Constantes
TASA_IVA = 0.19
LIMITE_PRODUCTOS = 50


# --- Bloque 3: Funciones de Validaci√≥n Especializadas ---

def validar_estructura_lista(productos: List[Dict]):
    """Valida la estructura general de la lista de productos."""
    if not isinstance(productos, list):
        raise TypeError("La entrada debe ser una lista.")
    if not productos:
        raise ValueError("La lista de productos no puede estar vac√≠a.")
    if len(productos) > LIMITE_PRODUCTOS:
        raise ValueError(f"No se pueden procesar m√°s de {LIMITE_PRODUCTOS} productos a la vez.")


def validar_formato_del_nombre(nombre: str):
    """
    Valida que el nombre no est√© vac√≠o, no sea solo num√©rico y no contenga caracteres especiales.
    """
    if not isinstance(nombre, str) or not nombre.strip():
        raise ValueError("El nombre del producto no puede ser un texto vac√≠o.")

    nombre_limpio = nombre.strip()
    if nombre_limpio.isdigit():
        raise ValueError(f"El nombre del producto '{nombre_limpio}' no puede ser un n√∫mero.")

    if not nombre_limpio.replace(" ", "").isalpha():
        raise ValueError("El nombre solo debe contener letras y espacios.")


def validar_formato_del_precio(precio: Union[int, float, str]):
    """
    Valida que el precio sea un n√∫mero positivo, ya sea entero o decimal.
    """
    try:
        precio_valido = float(precio)
    except (ValueError, TypeError):
        raise ValueError("El precio debe ser un n√∫mero (entero o decimal).")

    if precio_valido < 0:
        raise ValueError("El precio debe ser un n√∫mero positivo.")

    return precio_valido


def validar_contenido_productos(productos: List[Dict]):
    """Valida cada producto individual dentro de la lista."""
    nombres_vistos = set()
    for item in productos:
        if not isinstance(item, dict):
            raise TypeError(f"El elemento '{item}' no es un diccionario v√°lido.")
        if 'nombre' not in item or 'precio' not in item:
            raise ValueError(f"El producto '{item}' debe tener las claves 'nombre' y 'precio'.")

        # Validamos el nombre usando la funci√≥n especializada
        validar_formato_del_nombre(item['nombre'])

        # Validamos el precio usando la funci√≥n especializada
        validar_formato_del_precio(item['precio'])

        nombre_normalizado = item['nombre'].strip().lower()
        if nombre_normalizado in nombres_vistos:
            raise ValueError(f"El nombre del producto '{item['nombre']}' est√° duplicado.")
        nombres_vistos.add(nombre_normalizado)


# --- Bloque 2: Funci√≥n Principal de L√≥gica (El Director de Orquesta) ---

def procesar_productos(productos: List[Dict]) -> Dict[str, float]:
    """Orquesta la validaci√≥n y transforma la lista de productos."""
    validar_estructura_lista(productos)
    validar_contenido_productos(productos)

    # Transformaci√≥n de datos con dictionary comprehension
    return {
        item['nombre'].strip(): round(float(item['precio']) * (1 + TASA_IVA), 2)
        for item in productos
    }


# --- Bloque 1: Interacci√≥n con el Usuario ---

def main():
    """Gestiona la entrada del usuario, dando feedback inmediato."""
    print("üõí Transformador de Productos con IVA üõí")
    lista_productos = []

    print(f"\nIngrese hasta {LIMITE_PRODUCTOS} productos. Escriba 'fin' en el nombre para terminar.")

    while len(lista_productos) < LIMITE_PRODUCTOS:
        nombre_input = input(f"  - Nombre del producto #{len(lista_productos) + 1}: ").strip()
        if nombre_input.lower() == 'fin':
            break

        try:
            validar_formato_del_nombre(nombre_input)

            while True:
                precio_str = input(f"    Precio de '{nombre_input}': ")
                precio_validado = validar_formato_del_precio(precio_str)
                break

            lista_productos.append({"nombre": nombre_input, "precio": precio_validado})

        except ValueError as e:
            print(f"‚ö†Ô∏è Error: {e}. Intente de nuevo con este producto.")

    # Procesamiento final
    try:
        if not lista_productos:
            print("\nNo se ingresaron productos para procesar.")
            return

        print("\nLista de productos original:")
        for p in lista_productos:
            print(f" - {p['nombre']}: ${p['precio']:,.2f}")

        precios_con_iva = procesar_productos(lista_productos)

        print("\n‚úÖ Diccionario de precios con IVA (19%):")
        for nombre_iva, precio_iva in precios_con_iva.items():
            print(f" - {nombre_iva}: ${precio_iva:,.2f}")

    except (ValueError, TypeError) as e:
        print(f"\n‚ùå Error de procesamiento final: {e}")


if __name__ == "__main__":
    main()