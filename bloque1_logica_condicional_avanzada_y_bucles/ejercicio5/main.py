"""
Ejercicio 5: Clasificador de N√∫meros (Par/Impar con Ternario)

Este programa solicita un n√∫mero al usuario y, utilizando el operador ternario,
determina si es par o impar. Adicionalmente, verifica si el n√∫mero es m√∫ltiplo de 5.
"""


def clasificar_numero(numero: int) -> str:
    """
    Clasifica un n√∫mero como 'Par' o 'Impar' usando el operador ternario.

    Args:
        numero (int): El n√∫mero entero a clasificar.

    Returns:
        str: La cadena 'Par' si el n√∫mero es par, 'Impar' si es impar.
    """
    # Operador ternario: (valor_si_verdadero) if (condicion) else (valor_si_falso)
    estado = "Par" if numero % 2 == 0 else "Impar"
    if numero == 0:
        estado = "Neutro"
    return estado


def main():
    """
    Funci√≥n main que solicita el n√∫mero, realiza las validaciones y
    muestra los resultados al usuario.
    """
    print("üî¢ Clasificador de N√∫meros (Par/Impar) üî¢")

    # Bucle para validar que la entrada sea un n√∫mero entero
    while True:
        try:
            entrada_usuario = input("Por favor, ingrese un n√∫mero entero: ")
            if entrada_usuario == '':
                print("‚ö†Ô∏è Advertencia: La entrada no puede estar vac√≠a. Intente de nuevo.")
                continue
            numero = int(entrada_usuario)
            break
        except ValueError:
            print("‚ùå Error: La entrada no es un n√∫mero entero v√°lido. Intente de nuevo.")

    # Usa la funci√≥n para clasificar el n√∫mero y muestra el resultado
    resultado_clasificacion = clasificar_numero(numero)
    print(f"\nEl n√∫mero {numero} es: {resultado_clasificacion}")

    # Mensaje especial para el n√∫mero cero
    if numero == 0:
        print("‚ö†Ô∏è Nota: El n√∫mero cero es considerado 'Neutro' y es m√∫ltiplo de todos los n√∫meros.")

    # Mensaje adicional si el n√∫mero es m√∫ltiplo de 5
    if numero % 5 == 0:
        print("üí° ¬°Dato extra! Este n√∫mero tambi√©n es un m√∫ltiplo de 5.")


if __name__ == "__main__":
    main()


