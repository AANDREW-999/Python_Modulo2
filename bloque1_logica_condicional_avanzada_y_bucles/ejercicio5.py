"""
Ejercicio 5: Clasificador de N√∫meros

El programa solicita un n√∫mero y lo analiza. Toda la l√≥gica de validaci√≥n
y clasificaci√≥n est√° encapsulada en la funci√≥n `analizar_numero` para
facilitar pruebas exhaustivas.
"""

def analizar_numero(entrada_raw: str) -> tuple:
    """
    Valida y analiza una entrada para clasificarla como n√∫mero.

    Args:
        entrada_raw (str): La entrada del usuario en formato de texto.
    Returns:
        tuple: (n√∫mero_validado, clasificaci√≥n, es_multiplo_de_5)
    Raises:
        ValueError: Si la entrada est√° vac√≠a o no es un entero v√°lido.
    """
    # 1. Validaci√≥n de la entrada
    if not entrada_raw.strip():
        raise ValueError("la entrada no puede estar vac√≠a")

    try:
        numero = int(entrada_raw)
    except ValueError:
        raise ValueError("la entrada debe ser un n√∫mero entero v√°lido")

    # 2. An√°lisis del n√∫mero
    # Usamos un ternario anidado para la clasificaci√≥n
    clasificacion = "Neutro" if numero == 0 else ("Par" if numero % 2 == 0 else "Impar")

    es_multiplo_de_5 = (numero % 5 == 0)

    return numero, clasificacion, es_multiplo_de_5

def principal():
    """
    Funci√≥n principal que solicita el n√∫mero y muestra el an√°lisis.
    """
    print("üî¢ Clasificador de N√∫meros üî¢")

    while True:
        try:
            entrada_usuario = input("\nPor favor, ingrese un n√∫mero entero: ")

            # La funci√≥n `analizar_numero` hace la validaci√≥n y el an√°lisis
            numero, clasificacion, es_multiplo = analizar_numero(entrada_usuario)

            # Si el an√°lisis es exitoso, imprimimos los resultados
            print(f"\nEl n√∫mero {numero} es: {clasificacion}")

            if es_multiplo:
                if numero == 0:
                    print("üí° ¬°Dato extra! El cero es m√∫ltiplo de todos los n√∫meros, incluido el 5.")
                else:
                    print("üí° ¬°Dato extra! Este n√∫mero tambi√©n es m√∫ltiplo de 5.")

            break # Salimos del bucle si todo fue correcto

        except ValueError as e:
            print(f"‚ùå Error: {e}. Intente de nuevo.")

if __name__ == "__main__":
    principal()